using System.Numerics;
using Avalonia;
using Avalonia.Input;
using AvKey = Avalonia.Input.Key;
using ElKey = Silk.NET.Input.Key;
using ElCursorShape = Silk.NET.Input.StandardCursor;

namespace Elegy.Avalonia.Extensions;

/// <summary>Contains extensions methods to convert between Elegy and Avalonia types.</summary>
public static class ConversionExtensions
{
	private static readonly Dictionary<ElKey, AvKey> KeyMap = new()
	{
		[ElKey.Backspace] = AvKey.Back,
		[ElKey.Tab] = AvKey.Tab,
		//[ElKey.Clear] = AvKey.Clear,
		[ElKey.Enter] = AvKey.Return,
		[ElKey.ShiftLeft] = AvKey.LeftShift,
		[ElKey.ControlLeft] = AvKey.LeftCtrl,
		[ElKey.AltLeft] = AvKey.LeftAlt,
		[ElKey.Pause] = AvKey.Pause,
		[ElKey.CapsLock] = AvKey.CapsLock,
		[ElKey.Escape] = AvKey.Escape,
		[ElKey.Space] = AvKey.Space,
		[ElKey.PageUp] = AvKey.PageUp,
		[ElKey.PageDown] = AvKey.PageDown,
		[ElKey.End] = AvKey.End,
		[ElKey.Home] = AvKey.Home,
		[ElKey.Left] = AvKey.Left,
		[ElKey.Up] = AvKey.Up,
		[ElKey.Right] = AvKey.Right,
		[ElKey.Down] = AvKey.Down,
		[ElKey.PrintScreen] = AvKey.Snapshot,
		[ElKey.Insert] = AvKey.Insert,
		[ElKey.Delete] = AvKey.Delete,
		//[ElKey.Help] = AvKey.Help,
		[ElKey.Number1] = AvKey.D1,
		[ElKey.Number2] = AvKey.D2,
		[ElKey.Number3] = AvKey.D3,
		[ElKey.Number4] = AvKey.D4,
		[ElKey.Number5] = AvKey.D5,
		[ElKey.Number6] = AvKey.D6,
		[ElKey.Number7] = AvKey.D7,
		[ElKey.Number8] = AvKey.D8,
		[ElKey.Number9] = AvKey.D9,
		[ElKey.Number0] = AvKey.D0,
		[ElKey.A] = AvKey.A,
		[ElKey.B] = AvKey.B,
		[ElKey.C] = AvKey.C,
		[ElKey.D] = AvKey.D,
		[ElKey.E] = AvKey.E,
		[ElKey.F] = AvKey.F,
		[ElKey.G] = AvKey.G,
		[ElKey.H] = AvKey.H,
		[ElKey.I] = AvKey.I,
		[ElKey.J] = AvKey.J,
		[ElKey.K] = AvKey.K,
		[ElKey.L] = AvKey.L,
		[ElKey.M] = AvKey.M,
		[ElKey.N] = AvKey.N,
		[ElKey.O] = AvKey.O,
		[ElKey.P] = AvKey.P,
		[ElKey.Q] = AvKey.Q,
		[ElKey.R] = AvKey.R,
		[ElKey.S] = AvKey.S,
		[ElKey.T] = AvKey.T,
		[ElKey.U] = AvKey.U,
		[ElKey.V] = AvKey.V,
		[ElKey.W] = AvKey.W,
		[ElKey.X] = AvKey.X,
		[ElKey.Y] = AvKey.Y,
		[ElKey.Z] = AvKey.Z,
		//[ElKey.Meta] = AvKey.LWin,
		[ElKey.Menu] = AvKey.Apps,
		//[ElKey.Sleep] = AvKey.Sleep,
		[ElKey.Keypad0] = AvKey.NumPad0,
		[ElKey.Keypad1] = AvKey.NumPad1,
		[ElKey.Keypad2] = AvKey.NumPad2,
		[ElKey.Keypad3] = AvKey.NumPad3,
		[ElKey.Keypad4] = AvKey.NumPad4,
		[ElKey.Keypad5] = AvKey.NumPad5,
		[ElKey.Keypad6] = AvKey.NumPad6,
		[ElKey.Keypad7] = AvKey.NumPad7,
		[ElKey.Keypad8] = AvKey.NumPad8,
		[ElKey.Keypad9] = AvKey.NumPad9,
		[ElKey.KeypadMultiply] = AvKey.Multiply,
		[ElKey.KeypadAdd] = AvKey.Add,
		[ElKey.KeypadSubtract] = AvKey.Subtract,
		[ElKey.KeypadDecimal] = AvKey.Decimal,
		[ElKey.KeypadDivide] = AvKey.Divide,
		[ElKey.F1] = AvKey.F1,
		[ElKey.F2] = AvKey.F2,
		[ElKey.F3] = AvKey.F3,
		[ElKey.F4] = AvKey.F4,
		[ElKey.F5] = AvKey.F5,
		[ElKey.F6] = AvKey.F6,
		[ElKey.F7] = AvKey.F7,
		[ElKey.F8] = AvKey.F8,
		[ElKey.F9] = AvKey.F9,
		[ElKey.F10] = AvKey.F10,
		[ElKey.F11] = AvKey.F11,
		[ElKey.F12] = AvKey.F12,
		[ElKey.F13] = AvKey.F13,
		[ElKey.F14] = AvKey.F14,
		[ElKey.F15] = AvKey.F15,
		[ElKey.F16] = AvKey.F16,
		[ElKey.F17] = AvKey.F17,
		[ElKey.F18] = AvKey.F18,
		[ElKey.F19] = AvKey.F19,
		[ElKey.F20] = AvKey.F20,
		[ElKey.F21] = AvKey.F21,
		[ElKey.F22] = AvKey.F22,
		[ElKey.F23] = AvKey.F23,
		[ElKey.F24] = AvKey.F24,
		[ElKey.NumLock] = AvKey.NumLock,
		[ElKey.ScrollLock] = AvKey.Scroll,
		//[ElKey.Backward] = AvKey.BrowserBack,
		//[ElKey.Forward] = AvKey.BrowserForward,
		//[ElKey.Refresh] = AvKey.BrowserRefresh,
		//[ElKey.Stop] = AvKey.BrowserStop,
		//[ElKey.Search] = AvKey.BrowserSearch,
		//[ElKey.Favorites] = AvKey.BrowserFavorites,
		//[ElKey.Homepage] = AvKey.Home,
		//[ElKey.Volumemute] = AvKey.VolumeMute,
		//[ElKey.Volumedown] = AvKey.VolumeDown,
		//[ElKey.Volumeup] = AvKey.VolumeUp,
		//[ElKey.Medianext] = AvKey.MediaNextTrack,
		//[ElKey.Mediaprevious] = AvKey.MediaPreviousTrack,
		//[ElKey.Mediastop] = AvKey.MediaStop,
		//[ElKey.Mediaplay] = AvKey.MediaPlayPause,
		//[ElKey.Launchmail] = AvKey.LaunchMail,
		//[ElKey.Launchmedia] = AvKey.SelectMedia,
		//[ElKey.Launch0] = AvKey.LaunchApplication1,
		//[ElKey.Launch1] = AvKey.LaunchApplication2,
		[ElKey.Semicolon] = AvKey.Oem1,
		[ElKey.Equal] = AvKey.OemPlus,
		[ElKey.Comma] = AvKey.OemComma,
		[ElKey.Minus] = AvKey.OemMinus,
		[ElKey.Period] = AvKey.OemPeriod,
		[ElKey.Slash] = AvKey.Oem2,
		//[ElKey.Quoteleft] = AvKey.Oem3,
		[ElKey.LeftBracket] = AvKey.Oem4,
		[ElKey.BackSlash] = AvKey.Oem5,
		[ElKey.RightBracket] = AvKey.Oem6,
		[ElKey.Apostrophe] = AvKey.Oem7,
		//[ElKey.Bar] = AvKey.Oem102
	};

	private static readonly Dictionary<ElKey, PhysicalKey> PhysicalKeyMap = new()
	{
		[ElKey.Backspace] = PhysicalKey.Backspace,
		[ElKey.Tab] = PhysicalKey.Tab,
		//[ElKey.Clear] = PhysicalKey.NumPadClear,
		[ElKey.Enter] = PhysicalKey.Enter,
		[ElKey.ShiftLeft] = PhysicalKey.ShiftLeft,  // Elegy maps Left Shift and Right Shift keys to the same key
		[ElKey.ControlLeft] = PhysicalKey.ControlLeft, // Elegy maps Left Ctrl and Right Ctrl keys to the same key
		[ElKey.AltLeft] = PhysicalKey.AltLeft,      // Elegy maps Left Alt and Right Alt keys to the same key
		[ElKey.Pause] = PhysicalKey.Pause,
		[ElKey.CapsLock] = PhysicalKey.CapsLock,
		[ElKey.Escape] = PhysicalKey.Escape,
		[ElKey.Space] = PhysicalKey.Space,
		[ElKey.PageUp] = PhysicalKey.PageUp,
		[ElKey.PageDown] = PhysicalKey.PageDown,
		[ElKey.End] = PhysicalKey.End,
		[ElKey.Home] = PhysicalKey.Home,
		[ElKey.Left] = PhysicalKey.ArrowLeft,
		[ElKey.Up] = PhysicalKey.ArrowUp,
		[ElKey.Right] = PhysicalKey.ArrowRight,
		[ElKey.Down] = PhysicalKey.ArrowDown,
		[ElKey.PrintScreen] = PhysicalKey.PrintScreen,
		[ElKey.Insert] = PhysicalKey.Insert,
		[ElKey.Delete] = PhysicalKey.Delete,
		//[ElKey.Help] = PhysicalKey.Help,
		[ElKey.Number1] = PhysicalKey.Digit1,
		[ElKey.Number2] = PhysicalKey.Digit2,
		[ElKey.Number3] = PhysicalKey.Digit3,
		[ElKey.Number4] = PhysicalKey.Digit4,
		[ElKey.Number5] = PhysicalKey.Digit5,
		[ElKey.Number6] = PhysicalKey.Digit6,
		[ElKey.Number7] = PhysicalKey.Digit7,
		[ElKey.Number8] = PhysicalKey.Digit8,
		[ElKey.Number9] = PhysicalKey.Digit9,
		[ElKey.Number0] = PhysicalKey.Digit0,
		[ElKey.A] = PhysicalKey.A,
		[ElKey.B] = PhysicalKey.B,
		[ElKey.C] = PhysicalKey.C,
		[ElKey.D] = PhysicalKey.D,
		[ElKey.E] = PhysicalKey.E,
		[ElKey.F] = PhysicalKey.F,
		[ElKey.G] = PhysicalKey.G,
		[ElKey.H] = PhysicalKey.H,
		[ElKey.I] = PhysicalKey.I,
		[ElKey.J] = PhysicalKey.J,
		[ElKey.K] = PhysicalKey.K,
		[ElKey.L] = PhysicalKey.L,
		[ElKey.M] = PhysicalKey.M,
		[ElKey.N] = PhysicalKey.N,
		[ElKey.O] = PhysicalKey.O,
		[ElKey.P] = PhysicalKey.P,
		[ElKey.Q] = PhysicalKey.Q,
		[ElKey.R] = PhysicalKey.R,
		[ElKey.S] = PhysicalKey.S,
		[ElKey.T] = PhysicalKey.T,
		[ElKey.U] = PhysicalKey.U,
		[ElKey.V] = PhysicalKey.V,
		[ElKey.W] = PhysicalKey.W,
		[ElKey.X] = PhysicalKey.X,
		[ElKey.Y] = PhysicalKey.Y,
		[ElKey.Z] = PhysicalKey.Z,
		//[ElKey.Meta] = PhysicalKey.MetaLeft,
		[ElKey.Menu] = PhysicalKey.ContextMenu,
		//[ElKey.Standby] = PhysicalKey.Sleep,
		[ElKey.Keypad0] = PhysicalKey.NumPad0,
		[ElKey.Keypad1] = PhysicalKey.NumPad1,
		[ElKey.Keypad2] = PhysicalKey.NumPad2,
		[ElKey.Keypad3] = PhysicalKey.NumPad3,
		[ElKey.Keypad4] = PhysicalKey.NumPad4,
		[ElKey.Keypad5] = PhysicalKey.NumPad5,
		[ElKey.Keypad6] = PhysicalKey.NumPad6,
		[ElKey.Keypad7] = PhysicalKey.NumPad7,
		[ElKey.Keypad8] = PhysicalKey.NumPad8,
		[ElKey.Keypad9] = PhysicalKey.NumPad9,
		[ElKey.KeypadMultiply] = PhysicalKey.NumPadMultiply,
		[ElKey.KeypadAdd] = PhysicalKey.NumPadAdd,
		[ElKey.KeypadSubtract] = PhysicalKey.NumPadSubtract,
		[ElKey.KeypadDecimal] = PhysicalKey.NumPadDecimal,
		[ElKey.KeypadDivide] = PhysicalKey.NumPadDivide,
		[ElKey.F1] = PhysicalKey.F1,
		[ElKey.F2] = PhysicalKey.F2,
		[ElKey.F3] = PhysicalKey.F3,
		[ElKey.F4] = PhysicalKey.F4,
		[ElKey.F5] = PhysicalKey.F5,
		[ElKey.F6] = PhysicalKey.F6,
		[ElKey.F7] = PhysicalKey.F7,
		[ElKey.F8] = PhysicalKey.F8,
		[ElKey.F9] = PhysicalKey.F9,
		[ElKey.F10] = PhysicalKey.F10,
		[ElKey.F11] = PhysicalKey.F11,
		[ElKey.F12] = PhysicalKey.F12,
		[ElKey.F13] = PhysicalKey.F13,
		[ElKey.F14] = PhysicalKey.F14,
		[ElKey.F15] = PhysicalKey.F15,
		[ElKey.F16] = PhysicalKey.F16,
		[ElKey.F17] = PhysicalKey.F17,
		[ElKey.F18] = PhysicalKey.F18,
		[ElKey.F19] = PhysicalKey.F19,
		[ElKey.F20] = PhysicalKey.F20,
		[ElKey.F21] = PhysicalKey.F21,
		[ElKey.F22] = PhysicalKey.F22,
		[ElKey.F23] = PhysicalKey.F23,
		[ElKey.F24] = PhysicalKey.F24,
		[ElKey.NumLock] = PhysicalKey.NumLock,
		[ElKey.ScrollLock] = PhysicalKey.ScrollLock,
		//[ElKey.Back] = PhysicalKey.BrowserBack,
		//[ElKey.Forward] = PhysicalKey.BrowserForward,
		//[ElKey.Refresh] = PhysicalKey.BrowserRefresh,
		//[ElKey.Stop] = PhysicalKey.BrowserStop,
		//[ElKey.Search] = PhysicalKey.BrowserSearch,
		//[ElKey.Favorites] = PhysicalKey.BrowserFavorites,
		//[ElKey.Homepage] = PhysicalKey.Home,
		//[ElKey.Volumemute] = PhysicalKey.AudioVolumeMute,
		//[ElKey.Volumedown] = PhysicalKey.AudioVolumeDown,
		//[ElKey.Volumeup] = PhysicalKey.AudioVolumeUp,
		//[ElKey.Medianext] = PhysicalKey.MediaTrackNext,
		//[ElKey.Mediaprevious] = PhysicalKey.MediaTrackPrevious,
		//[ElKey.Mediastop] = PhysicalKey.MediaStop,
		//[ElKey.Mediaplay] = PhysicalKey.MediaPlayPause,
		//[ElKey.Launchmail] = PhysicalKey.LaunchMail,
		//[ElKey.Launchmedia] = PhysicalKey.MediaSelect,
		//[ElKey.Launch0] = PhysicalKey.LaunchApp1,
		//[ElKey.Launch1] = PhysicalKey.LaunchApp2,
		[ElKey.Semicolon] = PhysicalKey.Semicolon,
		[ElKey.Equal] = PhysicalKey.Equal,
		[ElKey.Comma] = PhysicalKey.Comma,
		[ElKey.Minus] = PhysicalKey.Minus,
		[ElKey.Period] = PhysicalKey.Period,
		[ElKey.Slash] = PhysicalKey.Slash,
		//[ElKey.Quoteleft] = PhysicalKey.Backquote,
		[ElKey.LeftBracket] = PhysicalKey.BracketLeft,
		[ElKey.BackSlash] = PhysicalKey.Backslash,
		[ElKey.RightBracket] = PhysicalKey.BracketRight,
		[ElKey.Apostrophe] = PhysicalKey.Quote,
		//[ElKey.Bar] = PhysicalKey.IntlBackslash,
	};

	private static readonly Dictionary<StandardCursorType, ElCursorShape> CursorMap = new()
	{
		[StandardCursorType.Arrow] = ElCursorShape.Arrow,
		[StandardCursorType.Ibeam] = ElCursorShape.IBeam,
		[StandardCursorType.Wait] = ElCursorShape.Hand,
		[StandardCursorType.Cross] = ElCursorShape.Arrow,
		[StandardCursorType.UpArrow] = ElCursorShape.Arrow,
		[StandardCursorType.SizeWestEast] = ElCursorShape.HResize,
		[StandardCursorType.SizeNorthSouth] = ElCursorShape.VResize,
		[StandardCursorType.No] = ElCursorShape.Arrow,
		[StandardCursorType.Hand] = ElCursorShape.Hand,
		[StandardCursorType.AppStarting] = ElCursorShape.Arrow,
		[StandardCursorType.Help] = ElCursorShape.Arrow,
		[StandardCursorType.TopSide] = ElCursorShape.VResize,
		[StandardCursorType.BottomSide] = ElCursorShape.VResize,
		[StandardCursorType.LeftSide] = ElCursorShape.HResize,
		[StandardCursorType.RightSide] = ElCursorShape.HResize,
		[StandardCursorType.DragMove] = ElCursorShape.Arrow,
		[StandardCursorType.DragCopy] = ElCursorShape.Arrow,
		[StandardCursorType.DragLink] = ElCursorShape.Arrow,
		
		// TODO: Elegy-Avalonia: Silk.NET doesn't have diagonal drag icons
		[StandardCursorType.SizeAll] = ElCursorShape.HResize,
		[StandardCursorType.TopLeftCorner] = ElCursorShape.HResize,
		[StandardCursorType.TopRightCorner] = ElCursorShape.HResize,
		[StandardCursorType.BottomLeftCorner] = ElCursorShape.HResize,
		[StandardCursorType.BottomRightCorner] = ElCursorShape.HResize
	};

	public static AvKey ToAvaloniaKey( this ElKey source )
		=> KeyMap.GetValueOrDefault( source, AvKey.None );

	public static PhysicalKey ToAvaloniaPhysicalKey( this ElKey source )
		=> PhysicalKeyMap.GetValueOrDefault( source, PhysicalKey.None );

	public static Size ToAvaloniaSize( this Vector2 source )
		=> new( source.X, source.Y );

	public static Point ToAvaloniaPoint( this Vector2 source )
		=> new( source.X, source.Y );
	
	public static ElCursorShape ToElegyCursorShape( this StandardCursorType source )
		=> CursorMap.GetValueOrDefault( source, ElCursorShape.Arrow );
}
