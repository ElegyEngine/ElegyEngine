// SPDX-FileCopyrightText: 2022-present Elegy Engine contributors
// SPDX-License-Identifier: MIT

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace Elegy.Bootstrap.Generator
{
	/// <summary>
	/// 
	/// </summary>
	[Generator]
	public class BoilerplateGenerator : IIncrementalGenerator
	{
		public void Initialize( IncrementalGeneratorInitializationContext context )
		{
			context.RegisterPostInitializationOutput( context =>
			{
				context.AddSource( "Generated/EcsBoilerplate.cs", SourceText.From(
					$$"""
					// This madness was auto-generated by Elegy.ECS.Generator

					using System;
					using fennecs;

					namespace Elegy.ECS;

					public static partial class ComponentRegistry
					{
						/// <summary>
						/// This gets autogenerated by Elegy.ECS.Generator.
						/// </summary>
						public static partial bool ParseComponentKeyvalue( Entity entity, ReadOnlySpan<char> key, string value );

						/// <summary>
						/// Creates a component, keeping in mind <see cref="RequiresAttribute{T}"/> i.e. component dependencies.
						/// </summary>
						public static partial ref T Create<T>( Entity entity )
							where T: notnull, new();

						public static EntityOutput ParseOutput( Entity entity, ReadOnlySpan<char> key, string value )
							=> EntityOutput.FromKeyvalue( entity, key.ToString(), value );
					}
					""", encoding: Encoding.ASCII
					) );
			} );
		}
	}
}
