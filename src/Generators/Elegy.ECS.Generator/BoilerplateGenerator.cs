// SPDX-FileCopyrightText: 2022-present Elegy Engine contributors
// SPDX-License-Identifier: MIT

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Text;

namespace Elegy.ECS.Generator
{
	/// <summary>
	/// 
	/// </summary>
	[Generator]
	public class BoilerplateGenerator : IIncrementalGenerator
	{
		public void Initialize( IncrementalGeneratorInitializationContext context )
		{
			Utilities.SetupSymbolBasedGenerator( context,
				implementationOutput: false,
				action: static ( production, symbols ) =>
				{
					string? componentRegistryFullName = Utilities.GetComponentRegistryFullName( symbols );
					if ( componentRegistryFullName is null )
					{
						throw new EntryPointNotFoundException( "There's no type that is marked with 'GenerateComponentRegistry'" );
					}

					(string registryNamespaces, string registryName) = Utilities.SeparateNamespaceAndTypename( componentRegistryFullName );

					production.AddSource( "Generated/ComponentRegistry.Boilerplate.cs", SourceText.From(
						$$"""
						// This madness was auto-generated by Elegy.ECS.Generator

						using System;
						using fennecs;
						using Elegy.ECS;

						namespace {{registryNamespaces}};

						public static partial class {{registryName}}
						{
							/// <summary>
							/// This gets autogenerated by Elegy.ECS.Generator.
							/// </summary>
							public static partial bool ParseComponentKeyvalue( Entity entity, ReadOnlySpan<char> key, string value );

							/// <summary>
							/// Creates a component, keeping in mind <see cref="RequiresAttribute{T}"/> i.e. component dependencies.
							/// </summary>
							public static partial ref T Create<T>( Entity entity )
								where T: notnull, new();

							public static EntityOutput ParseOutput( Entity entity, ReadOnlySpan<char> key, string value )
								=> EntityOutput.FromKeyvalue( entity, key.ToString(), value );
						}
						""", encoding: Encoding.ASCII
						) );
				} );
		}
	}
}
