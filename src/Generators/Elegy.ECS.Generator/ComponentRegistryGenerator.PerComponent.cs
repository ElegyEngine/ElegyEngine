// SPDX-FileCopyrightText: 2022-present Elegy Engine contributors
// SPDX-License-Identifier: MIT

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Elegy.ECS.Generator
{
	public partial class ComponentRegistryGenerator
	{
		private void GeneratePerComponent( SourceProductionContext production, SimpleTypeInfo registry,
			List<SimpleTypeInfo> components, List<SimpleTypeInfo> eventModels )
		{
			string getFullNameByEventModelName( string name )
			{
				foreach ( var model in eventModels )
				{
					if ( name.EndsWith( model.Name ) )
					{
						return model.FullName;
					}
				}

				return name;
			}

			string getEventModelFromMethod( SimpleMethodInfo method )
				=> $"global::{getFullNameByEventModelName( method.Parametres[0].Datatype )}";

			string generateDispatchParametres( SimpleMethodInfo method )
			{
				if ( method.Parametres.Count == 0 )
				{
					return "( fennecs.Entity entity )";
				}

				return $"( fennecs.Entity entity, object data )";

				//string result = "( fennecs.Entity entity, ";
				//
				//int parametreId = 0;
				//foreach ( var parametre in method.Parametres )
				//{
				//	result += $"object param{parametreId++}";
				//	if ( parametreId < method.Parametres.Count )
				//	{
				//		result += ", ";
				//	}
				//}
				//
				//return result + " )";
			}

			string generateCallParametres( SimpleMethodInfo method )
			{
				if ( method.Parametres.Count == 0 )
				{
					return "()";
				}

				string fullTypePath = getFullNameByEventModelName( method.Parametres[0].Datatype );

				return $"( (global::{fullTypePath})data )";

				//string result = "( ";
				//
				//int parametreId = 0;
				//foreach ( var parametre in method.Parametres )
				//{
				//	string fullTypePath = getFullNameByEventModelName( parametre.Datatype );
				//
				//	result += $"(global::{fullTypePath})param{parametreId++}";
				//	if ( parametreId < method.Parametres.Count )
				//	{
				//		result += ", ";
				//	}
				//}
				//
				//return result + " )";
			}

			foreach ( var component in components )
			{
				StringBuilder sb = new();

				sb.AppendLine(
				$$"""
				// This madness was auto-generated by Elegy.ECS.Generator

				namespace {{component.Namespace}};

				public partial {{component.Kind.ToString().ToLower()}} {{component.Name}} : IComponent
				{
					public global::{{registry.Namespace}}.ComponentKind Kind => ComponentKind.{{component.FullName.Replace( '.', '_' )}};
				"""
				);

				var entityEventMethods = component.Methods.Where( m => m.HasAttribute( "Event" ) );
				var simpleEvents = entityEventMethods.Where( m => m.Parametres.Count == 0 );
				var complexEvents = entityEventMethods.Where( m => m.Parametres.Count != 0 );

				foreach ( var method in simpleEvents )
				{
					sb.AppendLine(
				$$"""

					public static void Dispatch{{method.Name}}( fennecs.Entity entity )
					{
						entity.Ref<{{component.Name}}>().{{method.Name}}();
					}
				"""
					);
				}

				foreach ( var method in complexEvents )
				{
					sb.AppendLine(
				$$"""

					public static void Dispatch{{method.Name}}{{generateDispatchParametres( method )}}
					{
						entity.Ref<{{component.Name}}>().{{method.Name}}{{generateCallParametres( method )}};
					}
				"""
					);
				}

				sb.AppendLine(
				"""

					public static readonly List<Tuple<Type, Action<fennecs.Entity>>> EventHandlerList =
					[
				"""
				);

				foreach ( var method in simpleEvents )
				{
					sb.AppendLine(
				$$"""
						new( typeof({{getEventModelFromMethod( method )}}), Dispatch{{method.Name}} ),
				"""
				);
				}

				sb.AppendLine(
				"""
					];

					public static readonly List<Tuple<Type, Action<fennecs.Entity, object>>> ComplexEventHandlerList =
					[
				"""
				);

				foreach ( var method in complexEvents )
				{
					sb.AppendLine(
				$$"""
						new( typeof({{getEventModelFromMethod( method )}}), Dispatch{{method.Name}} ),
				"""
				);
				}

				sb.AppendLine(
				"""
					];
				}
				"""
				);

				production.AddSource( $"{component.Name}.Generated.cs",
					SourceText.From( sb.ToString(), Encoding.ASCII ) );
			}
		}
	}
}
