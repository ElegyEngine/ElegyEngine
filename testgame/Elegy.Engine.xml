<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elegy.Engine</name>
    </assembly>
    <members>
        <member name="T:Elegy.Console">
            <summary>
            Elegy console interface.
            </summary>
        </member>
        <member name="M:Elegy.Console.RegisterCommand(Elegy.ConsoleCommands.ConsoleCommand)">
            <summary>
            
            </summary>
            <returns><c>true</c> upon success, <c>false</c> upon encountering
            a duplicate or other error.</returns>
        </member>
        <member name="M:Elegy.Console.UnregisterCommand(Elegy.ConsoleCommands.ConsoleCommand)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elegy.Console.Execute(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elegy.Console.AddFrontend(Elegy.IConsoleFrontend)">
            <summary>
            Registers a <seealso cref="T:Elegy.IConsoleFrontend"/> plugin.
            </summary>
        </member>
        <member name="M:Elegy.Console.RemoveFrontend(Elegy.IConsoleFrontend)">
            <summary>
            Unregisters a <seealso cref="T:Elegy.IConsoleFrontend"/>.
            </summary>
        </member>
        <member name="M:Elegy.Console.Log(System.String,Elegy.ConsoleMessageType)">
            <summary>
            Logs a message into the console, with a newline at the end.
            </summary>
        </member>
        <member name="M:Elegy.Console.LogInline(System.String)">
            <summary>
            Logs a message into the console without a newline.
            </summary>
        </member>
        <member name="M:Elegy.Console.Newline(Elegy.ConsoleMessageType)">
            <summary>
            Inserts a newline into the console.
            </summary>
        </member>
        <member name="M:Elegy.Console.Success(System.String)">
            <summary>
            Prints a success message.
            </summary>
        </member>
        <member name="M:Elegy.Console.Warning(System.String)">
            <summary>
            Prints a warning message.
            </summary>
        </member>
        <member name="M:Elegy.Console.Error(System.String)">
            <summary>
            Prints an error message.
            </summary>
        </member>
        <member name="M:Elegy.Console.Fatal(System.String)">
            <summary>
            Prints a fatal error message.
            </summary>
        </member>
        <member name="M:Elegy.Console.Log(System.String,System.String,Elegy.ConsoleMessageType)">
            <summary>
            Prints a message with a tag. E.g. '[Game] Map loaded!'
            </summary>
        </member>
        <member name="M:Elegy.Console.Success(System.String,System.String)">
            <summary>
            Prints a success message with a tag. E.g. '[Game] Map loaded!'
            </summary>
        </member>
        <member name="M:Elegy.Console.Warning(System.String,System.String)">
            <summary>
            Prints a warning with a tag. E.g. '[ModelManager] Model has too many vertices!'
            </summary>
        </member>
        <member name="M:Elegy.Console.Error(System.String,System.String)">
            <summary>
            Prints an error with a tag. E.g. '[ModelManager] Can't find asset!'
            </summary>
        </member>
        <member name="M:Elegy.Console.Fatal(System.String,System.String)">
            <summary>
            Prints a fatal error with a tag. E.g. '[Engine] OS could not allocate memory'
            </summary>
        </member>
        <member name="M:Elegy.Console.LogArray``1(``0[])">
            <summary>
            Prints an array of values in a single line.
            </summary>
        </member>
        <member name="P:Elegy.Console.Developer">
            <summary>
            Controls the submission of developer messages.
            </summary>
        </member>
        <member name="P:Elegy.Console.Verbose">
            <summary>
            Controls the submission of verbose messages.
            </summary>
        </member>
        <member name="F:Elegy.Console.Red">
            <summary>
            All text after this is red.
            </summary>
        </member>
        <member name="F:Elegy.Console.Orange">
            <summary>
            All text after this is orange.
            </summary>
        </member>
        <member name="F:Elegy.Console.Yellow">
            <summary>
            All text after this is yellow.
            </summary>
        </member>
        <member name="F:Elegy.Console.Green">
            <summary>
            All text after this is green.
            </summary>
        </member>
        <member name="F:Elegy.Console.Blue">
            <summary>
            All text after this is blue.
            </summary>
        </member>
        <member name="F:Elegy.Console.Pink">
            <summary>
            All text after this is pink.
            </summary>
        </member>
        <member name="F:Elegy.Console.White">
            <summary>
            All text after this is white.
            </summary>
        </member>
        <member name="F:Elegy.Console.Gray">
            <summary>
            All text after this is gray.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleCommands.ConsoleCommand">
            <summary>
            Console command.
            </summary>
            <summary>
            Console command.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleCommands.ConsoleCommand.AutocompleteMethod">
            <summary>
            Called when the user has typed this command's <see cref="P:Elegy.ConsoleCommands.ConsoleCommand.Name"/> but is
            probably missing parameters. Provides autocomplete suggestions.
            </summary>
            <param name="text">The current text input in the console.</param>
            <param name="outSuggestions">Output suggestions. For performance
            reasons this is a preallocated buffer of strings.</param>
            <returns>If anything is available to autocomplete.</returns>
        </member>
        <member name="T:Elegy.ConsoleCommands.ConsoleCommand.CommandMethod">
            <summary>
            Called when the console command is invoked.
            </summary>
            <param name="args">A list of arguments, without the command itself.</param>
            <returns>Success.</returns>
        </member>
        <member name="T:Elegy.ConsoleCommands.ConsoleCommand.ValidateMethod">
            <summary>
            Called for every keystroke when the command's arguments are typed out.
            Provides feedback as to whether the input is correct.
            </summary>
            <param name="args">The current arguments provided to the console.</param>
            <param name="outMessage">A message to the user about their error, if <c>false</c> is returned.</param>
            <returns>If everything is correct.</returns>
        </member>
        <member name="P:Elegy.ConsoleCommands.ConsoleCommand.Name">
            <summary>
            The name of this console command.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.ConsoleCommand.Autocomplete">
            <summary>
            See <see cref="T:Elegy.ConsoleCommands.ConsoleCommand.AutocompleteMethod"/> for details.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.ConsoleCommand.Method">
            <summary>
            Method to be called when the console command is invoked.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.ConsoleCommand.Validate">
            <summary>
            See <see cref="T:Elegy.ConsoleCommands.ConsoleCommand.ValidateMethod"/> for more details.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.ConsoleCommand.#ctor(System.String,Elegy.ConsoleCommands.ConsoleCommand.CommandMethod)">
            <summary>
            Console command constructor.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.ConsoleCommand.DefaultAutocomplete(System.ReadOnlySpan{System.Char},System.String[]@)">
            <summary>
            Default autocomplete implementation. Doesn't offer any suggestions.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.ConsoleCommand.DefaultValidate(System.String[],System.String@)">
            <summary>
            Default validate implementation. Everything goes.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.ConsoleCommand.ValidateSingleNumeric(System.String[],System.String@)">
            <summary>
            Validates parameters
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.ConsoleCommand.FromMethod(System.Reflection.MethodInfo,Elegy.ConsoleCommandAttribute)">
            <summary>
            Creates a <see cref="T:Elegy.ConsoleCommands.ConsoleCommand"/> from a provided <paramref name="method"/>, which must be <c>static</c>,
            and its parametres must be primitives (<see cref="T:System.Int32"/>, <see cref="T:System.Single"/> etc.) or <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleCommands.ConVarRegistry">
            <summary>
            Provides utilities for static ConVars and ConCommands.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.FloatHelper">
            <summary>
            Console argument helper for floating-point arguments.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.FloatHelper.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.FloatHelper.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.DoubleHelper">
            <summary>
            Console argument helper for double-precision floating-point arguments.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.DoubleHelper.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.DoubleHelper.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.IntHelper">
            <summary>
            Console argument helper for integer arguments.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.IntHelper.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.IntHelper.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.BoolHelper">
            <summary>
            Console argument helper for double-precision floating-point arguments.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.BoolHelper.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.BoolHelper.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.StringHelper">
            <summary>
            Console argument helper for string arguments.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.StringHelper.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.StringHelper.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.StringArrayHelper">
            <summary>
            Console argument helper for string arguments.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.StringArrayHelper.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.StringArrayHelper.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.ConsoleArgumentHelperAttribute">
            <summary>
            Marks a class to be used by <see cref="T:Elegy.ConsoleCommands.Helpers.HelperManager"/> to help with console parsing.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper">
            <summary>
            Interface for <see cref="T:Elegy.ConsoleCommands.ConsoleCommand"/> argument parsing utilities.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper.Type">
            <summary>
            The datatype that the helper works with.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the argument as a string and resolves it as the appropriate datatype <see cref="P:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper.Type"/>.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <summary>
            Checks if <paramref name="argument"/> can be validated and if not, fills in <paramref name="errorMessage"/>.
            </summary>
            <returns><c>true</c> if <paramref name="argument"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.HelperTemplate`1">
            <summary>
            A template to help you implement <see cref="T:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper"/>.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.Helpers.HelperTemplate`1.Type">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.HelperTemplate`1.Parse(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.HelperTemplate`1.Validate(System.ReadOnlySpan{System.Char},System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.ConsoleParameter">
            <summary>
            Essentially a dictionary of console command arguments, with their respective parsing handlers.
            <code>public static void Test( float a, int b, int c = 10 )</code>
            would create:
            <code>
            ( "a", FloatHelper ),
            ( "b", IntHelper ),
            ( "c", IntHelper, 10 )
            </code>
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.ConsoleParameter.#ctor(Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Elegy.ConsoleCommands.Helpers.ConsoleParameter"/> from reflection metadata.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.Helpers.ConsoleParameter.Name">
            <summary>
            Name of the parametre.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.Helpers.ConsoleParameter.ArgumentHelper">
            <summary>
            The argument helper.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.Helpers.ConsoleParameter.DefaultValue">
            <summary>
            The default value, if any.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.Helpers.ConsoleParameter.Id">
            <summary>
            The order of the parameter. Must match the order of the parameter in the method it came from.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleCommands.Helpers.HelperManager">
            <summary>
            Manages instances of <see cref="T:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper"/>.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommands.Helpers.HelperManager.Helpers">
            <summary>
            See <see cref="T:Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper"/>.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.HelperManager.HasHelperForType(System.Type)">
            <summary>
            Whether or not there is a helper for a particular <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.HelperManager.RegisterHelper(Elegy.ConsoleCommands.Helpers.IConsoleArgumentHelper,System.Reflection.Assembly)">
            <summary>
            Registers one <paramref name="helper"/> and optionally ties it to an <paramref name="assembly"/> for bookkeeping.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.HelperManager.RegisterHelpers(System.Reflection.Assembly)">
            <summary>
            Registers helpers that are provided in an <paramref name="assembly"/>.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.HelperManager.UnregisterHelpers(System.Reflection.Assembly)">
            <summary>
            Unregisters helpers tied to the given <paramref name="assembly"/>.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommands.Helpers.HelperManager.UnregisterAllHelpers">
            <summary>
            Unregisters all helpers.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleCommandAttribute">
            <summary>
            Marks a method as a console command to be registered.
            </summary>
        </member>
        <member name="P:Elegy.ConsoleCommandAttribute.Name">
            <summary>
            The name of the console command to be displayed and looked up by <see cref="M:Elegy.Console.Execute(System.String)"/>.
            </summary>
        </member>
        <member name="M:Elegy.ConsoleCommandAttribute.#ctor(System.String)">
            <summary>
            Basic console command attribute constructor.
            </summary>
        </member>
        <member name="T:Elegy.ConsoleMessageType">
            <summary>
            Type of console message. Used by <seealso cref="T:Elegy.IConsoleFrontend"/> plugins to
            differentiate between different message types.
            </summary>
        </member>
        <member name="F:Elegy.ConsoleMessageType.Info">
            <summary>
            General messages.
            </summary>
        </member>
        <member name="F:Elegy.ConsoleMessageType.Success">
            <summary>
            Outstanding success messages.
            In external consoles, these messages would
            be displayed in green.
            </summary>
        </member>
        <member name="F:Elegy.ConsoleMessageType.Developer">
            <summary>
            Developer messages.
            </summary>
        </member>
        <member name="F:Elegy.ConsoleMessageType.Verbose">
            <summary>
            Verbose developer messages.
            </summary>
        </member>
        <member name="F:Elegy.ConsoleMessageType.Warning">
            <summary>
            Warning message. There was a minor fault.
            </summary>
        </member>
        <member name="F:Elegy.ConsoleMessageType.Error">
            <summary>
            Error message. There was a more major fault, but
            the system can recover from it.
            </summary>
        </member>
        <member name="F:Elegy.ConsoleMessageType.Fatal">
            <summary>
            Irrecoverable error message.
            </summary>
        </member>
        <member name="F:Elegy.Engine.MajorVersion">
            <summary>
            Elegy Engine major version, used for version checking against plugins.
            </summary>
        </member>
        <member name="F:Elegy.Engine.MinorVersion">
            <summary>
            Elegy Engine minor version, used for version checking against plugins.
            </summary>
        </member>
        <member name="F:Elegy.Engine.OldestSupportedMinor">
            <summary>
            Plugins built before this minor version will not work.
            </summary>
        </member>
        <member name="M:Elegy.Engine.ExitEngine(System.Int32)">
            <summary>
            Actually quits Godot
            </summary>
        </member>
        <member name="T:Elegy.EntryPoint">
            <summary>
            Effectively the entry point into the engine. The Godot-based launcher app
            loads this DLL, calls EntryPoint.Init and so on.
            </summary>
        </member>
        <member name="M:Elegy.EntryPoint.Init(Godot.Node3D)">
            <summary>
            The entry point, effectively our Main method.
            </summary>
        </member>
        <member name="M:Elegy.EntryPoint.Update(System.Single)">
            <summary>
            Called every frame by Elegy.Launcher.
            </summary>
        </member>
        <member name="M:Elegy.EntryPoint.PhysicsUpdate(System.Single)">
            <summary>
            Called every physics frame by Elegy.Launcher.
            </summary>
        </member>
        <member name="M:Elegy.EntryPoint.HandleInput(Godot.InputEvent)">
            <summary>
            Called for every input event by Elegy.Launcher.
            </summary>
        </member>
        <member name="T:Elegy.Extensions.NodeExtensions">
            <summary>
            Godot node extensions.
            </summary>
        </member>
        <member name="M:Elegy.Extensions.NodeExtensions.CreateChild``1(Godot.Node)">
            <summary>
            Creates a node and attaches it to this node.
            </summary>
        </member>
        <member name="M:Elegy.Extensions.NodeExtensions.Forward(Godot.Node3D)">
            <summary>
            Forward direction vector of this node.
            </summary>
        </member>
        <member name="M:Elegy.Extensions.NodeExtensions.Right(Godot.Node3D)">
            <summary>
            Right direction vector of this node.
            </summary>
        </member>
        <member name="M:Elegy.Extensions.NodeExtensions.Up(Godot.Node3D)">
            <summary>
            Up direction vector of this node.
            </summary>
        </member>
        <member name="M:Elegy.Extensions.NodeExtensions.ForwardLocal(Godot.Node3D)">
            <summary>
            Local forward direction vector of this node.
            </summary>
        </member>
        <member name="M:Elegy.Extensions.NodeExtensions.RightLocal(Godot.Node3D)">
            <summary>
            Local right direction vector of this node.
            </summary>
        </member>
        <member name="M:Elegy.Extensions.NodeExtensions.UpLocal(Godot.Node3D)">
            <summary>
            Local up direction vector of this node.
            </summary>
        </member>
        <member name="T:Elegy.FileSystem">
            <summary>
            Elegy filesystem interface.
            </summary>
        </member>
        <member name="M:Elegy.FileSystem.Mount(System.String,System.Boolean)">
            <summary>
            Mounts an application directory. Looks for an "applicationConfig.json" inside this directory,
            parses it and optionally mounts other directories referenced by the config.
            </summary>
            <param name="directory">The directory to mount.</param>
            <param name="mountOthers">Mount other dirs referenced by the config?</param>
            <returns>True on success, false if the directory does not exist, the config doesn't exist and so on.</returns>
        </member>
        <member name="M:Elegy.FileSystem.Unmount(System.String)">
            <summary>
            Unmounts a directory.
            </summary>
            <param name="directory"></param>
            <returns>True if successfully unmounted, false if the directory was already not mounted.</returns>
        </member>
        <member name="P:Elegy.FileSystem.CurrentConfig">
            <summary>
            Current application config.
            </summary>
        </member>
        <member name="P:Elegy.FileSystem.Configs">
            <summary>
            All application configs except the current one.
            </summary>
        </member>
        <member name="P:Elegy.FileSystem.EngineConfig">
            <summary>
            The current engine configuration.
            </summary>
        </member>
        <member name="P:Elegy.FileSystem.CurrentGamePath">
            <summary>
            Directory containing the current appliaction/game's assets.
            </summary>
        </member>
        <member name="P:Elegy.FileSystem.EnginePath">
            <summary>
            Directory containing the engine's base assets.
            </summary>
        </member>
        <member name="M:Elegy.FileSystem.Exists(System.String,Elegy.PathFlags,System.Boolean)">
            <param name="path">The relative path to be checked.</param>
            <param name="flags">Filter flags.</param>
            <param name="excludeOtherMountedDirectories">If true, only search in engine dir and base dir.</param>
            <returns>True if the path exists and passes the filter flags.</returns>
        </member>
        <member name="M:Elegy.FileSystem.PathTo(System.String,Elegy.PathFlags,System.Boolean)">
            <param name="destination">Relative path to the destination.</param>
            <param name="flags">Filter flags.</param>
            <param name="excludeOtherMountedDirectories">If true, only search in engine dir and base dir.</param>
            <returns>Working-directory-relative path to the destination in one of the mounted dirs.</returns>
        </member>
        <member name="M:Elegy.FileSystem.GetFiles(System.String,System.String,System.Boolean)">
            <param name="directory">A directory such as <c>"maps"</c> or <c>"models/vegetation"</c>.</param>
            <param name="searchPattern">The search pattern to filter out filenames.</param>
            <param name="recursive">Whether or not to scan subfolders too.</param>
            <returns>A list of files relative to <paramref name="directory"/>,
             <c>null</c> if <paramref name="directory"/> doesn't exist in any mounted path.</returns>
        </member>
        <member name="M:Elegy.FileSystem.GetDirectories(System.String,System.String,System.Boolean)">
            <param name="directory">A directory such as <c>"maps"</c> or <c>"models/vegetation"</c>.</param>
            <param name="searchPattern">The search pattern to filter out directory names.</param>
            <param name="recursive">Whether or not to scan subfolders too.</param>
            <returns>A list of directories relative to <paramref name="directory"/>,
             <c>null</c> if <paramref name="directory"/> doesn't exist in any mounted path.</returns>
        </member>
        <member name="M:Elegy.FileSystem.GetEntries(System.String,System.String,Elegy.PathFlags,System.Boolean)">
            <summary>
            Similar to <see cref="M:Elegy.FileSystem.GetFiles(System.String,System.String,System.Boolean)"/> and <see cref="M:Elegy.FileSystem.GetDirectories(System.String,System.String,System.Boolean)"/>, except it can include either filesystem entries.
            Useful for implementing your own <c>"ls"</c> or <c>"dir"</c> console command.
            </summary>
        </member>
        <member name="T:Elegy.PathFlags">
            <summary>
            Elegy filesystem path flags.
            </summary>
        </member>
        <member name="F:Elegy.PathFlags.File">
            <summary>
            This path is a file.
            </summary>
        </member>
        <member name="F:Elegy.PathFlags.Directory">
            <summary>
            This path is a directory.
            </summary>
        </member>
        <member name="F:Elegy.PathFlags.All">
            <summary>
            Flag for all and any kinds of paths, whether files or directories.
            </summary>
        </member>
        <member name="T:Elegy.Materials">
            <summary>
            Material system.
            </summary>
        </member>
        <member name="M:Elegy.Materials.LoadMaterial(System.String)">
            <summary>
            Loads a material from the material library.
            </summary>
            <param name="materialName">Name of the material.</param>
            <returns>
            A valid <see cref="T:Godot.Material"/> instance always, missing material if not found.
            </returns>
        </member>
        <member name="M:Elegy.Materials.UnloadMaterial(Godot.Material@)">
            <summary>
            Unloads the <paramref name="material"/>. It is a reference, so it will
            become <see langword="null"/> after this.
            </summary>
            <returns>
            <see langword="true"/> on success, <see langword="false"/>
            if the material is invalid or otherwise.
            </returns>
        </member>
        <member name="P:Elegy.Materials.AllMaterials">
            <summary>
            All the materials in the system.
            </summary>
        </member>
        <member name="T:Elegy.MaterialSystemInternal">
            <summary>
            Material system implementation.
            </summary>
        </member>
        <member name="T:Elegy.Models.Loaders.ObjModelLoader">
            <summary>
            Built-in OBJ loader.
            </summary>
        </member>
        <member name="M:Elegy.Models.Loaders.ObjModelLoader.CanLoad(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Elegy.Models.Loaders.ObjModelLoader.LoadModel(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Elegy.IApplication">
            <summary>
            Application plugin interface.
            This is implemented by games and tools.
            </summary>
        </member>
        <member name="M:Elegy.IApplication.Start">
            <summary>
            Start up game/app systems after all plugins have loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Elegy.IApplication.RunFrame(System.Single)">
            <summary>
            Execute a single game frame.
            </summary>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:Elegy.IApplication.RunPhysicsFrame(System.Single)">
            <summary>
            Execute a single physics frame.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Elegy.IApplication.HandleInput(Godot.InputEvent)">
            <summary>
            Handle user input.
            </summary>
            <param name="event"></param>
        </member>
        <member name="T:Elegy.IAssetLoader">
            <summary>
            Asset loader interface. <see cref="M:Elegy.IAssetLoader.CanLoad(System.String)"/> is called first, to
            check for the file extension, then the appropriate loading method is called,
            such as <seealso cref="M:Elegy.IModelLoader.LoadModel(System.String)"/>.
            </summary>
        </member>
        <member name="M:Elegy.IAssetLoader.CanLoad(System.String)">
            <summary>
            Whether or not this asset loader supports this format.
            For example, an OBJ loader may support .obj.
            </summary>
        </member>
        <member name="T:Elegy.IConsoleFrontend">
            <summary>
            Console frontend interface. Console frontends are essentially
            apps or widgets that display the engine's logged console messages.
            </summary>
        </member>
        <member name="M:Elegy.IConsoleFrontend.OnLog(System.String,Elegy.ConsoleMessageType,System.Single)">
            <summary>
            A message is being logged. Write it down.
            Console frontends should never use methods from Elegy.Console,
            else you get an infinite loop.
            </summary>
        </member>
        <member name="M:Elegy.IConsoleFrontend.OnUpdate(System.Single)">
            <summary>
            Called every frame to update the console frontend,
            in case it may be interactive or have some animations.
            </summary>
        </member>
        <member name="T:Elegy.ILevelLoader">
            <summary>
            Level loader interface.
            </summary>
        </member>
        <member name="T:Elegy.IModelLoader">
            <summary>
            Model loader interface.
            </summary>
        </member>
        <member name="M:Elegy.IModelLoader.LoadModel(System.String)">
            <summary>
            Loads a model from the given path.
            </summary>
            <returns>The model with its data,
            <c>null</c> if it cannot be loaded.</returns>
        </member>
        <member name="T:Elegy.IPlugin">
            <summary>
            Generic plugin interface.
            </summary>
        </member>
        <member name="M:Elegy.IPlugin.Init">
            <summary>
            Called when the plugin is being initialised.
            </summary>
        </member>
        <member name="M:Elegy.IPlugin.Shutdown">
            <summary>
            Called when the engine and plugins are shutting down.
            </summary>
        </member>
        <member name="P:Elegy.IPlugin.Name">
            <summary>
            The name of this plugin.
            </summary>
        </member>
        <member name="P:Elegy.IPlugin.Error">
            <summary>
            If <see cref="M:Elegy.IPlugin.Init"/> returned <c>false</c>, the error message.
            </summary>
        </member>
        <member name="P:Elegy.IPlugin.Initialised">
            <summary>
            Set by <see cref="M:Elegy.IPlugin.Init"/> once initialisation succeeds.
            </summary>
        </member>
        <member name="T:Elegy.ITextureLoader">
            <summary>
            Texture loader interface.
            </summary>
        </member>
        <member name="T:Elegy.Plugins">
            <summary>
            Elegy plugin system interface.
            </summary>
        </member>
        <member name="M:Elegy.Plugins.GetPlugin(System.String)">
            <summary>
            Reads plugin metadata, loads a plugin assembly and returns an instance of the plugin.
            </summary>
            <param name="path">Directory where the plugin is located.
            "game/plugins/something" will load "game/plugins/something/plugin.json"
            and load the assembly based on that plugin configuration.</param>
            <returns>null if the path is invalid or if it's missing needed files,
            otherwise returns a valid plugin instance.</returns>
        </member>
        <member name="M:Elegy.Plugins.GetApplication(System.String)">
            <summary>
            Same as GetPlugin, but for application plugins.
            </summary>
        </member>
        <member name="P:Elegy.Plugins.GenericPlugins">
            <returns>All plugins except IApplication-based ones.</returns>
        </member>
        <member name="P:Elegy.Plugins.Applications">
            <returns>All IApplication plugins and below.</returns>
        </member>
        <member name="T:Elegy.Utilities.Nodes">
            <summary>
            Utilities for interacting with Godot nodes.
            </summary>
        </member>
        <member name="M:Elegy.Utilities.Nodes.CreateNode``1">
            <summary>
            Creates a node and attaches it to the root world node.
            </summary>
        </member>
        <member name="M:Elegy.Utilities.Nodes.CreateCollisionShape(Godot.ArrayMesh,System.Boolean)">
            <summary>
            Creates a CollisionShape3D and creates either a ConcavePolygonShape3D
            or ConvexPolygonShape3D depending on the <paramref name="concave"/> parameter.
            </summary>
        </member>
    </members>
</doc>
